{
    "mmc": { // Device, The name should be the same with string in image:info:media:type
        "size": "8G", // Size of SD/eMMC
        "partitions": { // Partition table apply to device
            "spl":        { "offset": "0x4400", "size": "495k" },
            "env":        { "size": "256k" },
            "env_r":      { "size": "256k" },
            "os":         { "size": "8m" },
            "os_r":       { "size": "8m" },
            "rodata":     { "size": "12m" },
            "rodata_r":   { "size": "12m" },
            "data":       { "size": "35m" },
            "data_r":     { "size": "35m" },
        },
    },
    "image": {
        "info": { // Header information about image
            "platform": "d21x",
            "product": "demo88_mmc",
            "version": "1.0.0",
            "media": {
                "type": "mmc",
                "device_id": 0,
            }
        },
        "updater": { // Image writer which is downloaded to RAM by USB
            "ddr": {
                "file": "usbupg-ddr-init.aic",
                "attr": ["required", "run"],
                "ram": "0x00103000"
            },
            "spl": {
                "file": "bootloader.aic",
                "attr": ["required", "run"],
                "ram": "0x41000000"
            },
            "env": {
                "file": "env.bin",
                "attr": ["required"],
                "ram": "0x40140000"
            },
        },
        "target": { // Image components which will be burn to device's partitions
            "spl": {
                "file": "bootloader.aic",
                "attr": ["required"],
                "part": ["spl"]
            },
	    "env": {
                "file": "env.bin",
                "attr": ["block", "optional"],
                "part": ["env"]
            },
	    "env_r": {
                "file": "env.bin",
                "attr": ["block", "optional"],
                "part": ["env_r"]
            },
            "os": {
                "file": "d21x_os.itb",
                "attr": ["block", "required"],
                "part": ["os"]
            },
            "rodata": {
                "file": "rodata.fatfs",
                "attr": ["block", "optional"],
                "part": ["rodata"]
            },
            "data": {
                "file": "data.fatfs",
                "attr": ["block", "optional"],
                "part": ["data"]
            },
        },
    },
    "pre-process": { // Pre-proccess to generate image components from raw data
        "aicimage": { // Create aic boot image
            "usbupg-ddr-init.aic": { // No loader, only PreBootProgram to initialize DDR
                "head_ver": "0x00010001",
                "resource": {
                    "private": "ddr_init.bin",
                    "pbp": "d21x.pbp",
                },
            },
            "pbp_ext.aic": {
                "head_ver": "0x00010001",
                "resource": {
                    "pbp": "d21x.pbp",
                    "private": "ddr_init.bin",
                },
                // combine to use with loader.aic
                "with_ext": "true",
            },
            "loader.aic": {
                "head_ver": "0x00010001",
                "loader": {
                    "file": "bootloader.bin",
                    "load address": "CONFIG_AIC_BOOTLOADER_LOAD_BASE",
                    "entry point": "CONFIG_AIC_BOOTLOADER_TEXT_BASE", // 256 byte aic header
                },
                "resource": {
                    "private": "ddr_init.bin",
                },
            },
        },
        "concatenate": { // cat files in order
            "bootloader.aic": ["pbp_ext.aic", "loader.aic"],
        },
        "uboot_env": { // Create env data from txt
            "env.bin": {
                "file": "env.txt",
                "size": "4096",
                "redundant": "enable",
            },
        },
        "itb": { // Create itb image from its
            "d21x_os.itb": {
                "its": "d21x_os.its"
            },
        },
    },
}
